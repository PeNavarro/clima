{"version":3,"sources":["App.js","index.js"],"names":["App","useState","cidade","setCidade","clima","setClima","obtendoClima","setObtendoClima","erro","setErro","erroGeo","setErroGeo","a","process","urlClima","fetch","then","response","json","data","cod","catch","error","console","message","useEffect","apiGeo","latitude","longitude","url","results","components","city","country","navigator","geolocation","getCurrentPosition","position","obtemCidade","coords","code","Navbar","bg","Brand","href","className","Nav","Link","Form","inline","FormControl","type","value","placeholder","onChange","e","target","Button","onClick","obtemClima","disabled","length","Spinner","size","animation","Jumbotron","Alert","variant","onClose","dismissible","Heading","texto","Toast","delay","autohide","ToastHeader","ToastBody","Row","Card","Header","name","main","temp","temp_min","temp_max","Body","Img","src","weather","icon","title","description","Title","Footer","Date","dt","toLocaleString","timezone","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3851b793.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './style.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Form from 'react-bootstrap/Form'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Button from 'react-bootstrap/Button'\nimport Row from 'react-bootstrap/Row'\nimport Card from 'react-bootstrap/Card'\nimport Spinner from 'react-bootstrap/Spinner'\nimport Toast from 'react-bootstrap/Toast'\nimport Alert from 'react-bootstrap/Alert'\n\nimport { FaCloudversify, FaCloudRain, FaArrowDown, FaArrowUp } from 'react-icons/fa'\nimport { ToastBody, ToastHeader } from 'react-bootstrap'\n\nfunction App(){\n  const [cidade, setCidade] = useState('')\n  const [clima, setClima] = useState(null)\n  const [obtendoClima, setObtendoClima] = useState(false)\n  const [erro, setErro] = useState(null)\n  const [erroGeo, setErroGeo] = useState(null)\n\n  const listaErrosGeo = [\n    {\"C칩digo\":1, \"texto\":\"Permis칚o de localiza칞칚o negada\"},\n    {\"C칩digo\":2, \"texto\":\"N칚o foi poss칤vel obter a localiza칞칚o\"},\n    {\"C칩digo\":3, \"texto\":\"O tempo de espera para obter a localiza칞칚o foi expirado!\"}]\n\n  useEffect(() =>{\n    const apiGeo = process.env.REACT_APP_APIKEY_GEO\n    if('geolocation' in navigator){\n      navigator.geolocation.getCurrentPosition(function (position){\n        //console.log(position)\n        obtemCidade(position.coords.latitude, position.coords.longitude)\n      }, function (error){\n        console.error(error)\n        setErroGeo(error.code)\n      })\n    }\n    async function obtemCidade(latitude, longitude){\n      let url = `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${apiGeo}`\n      await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        //console.log(data)\n        setCidade(data.results[0].components.city+', '+data.results[0].components.country)\n      })\n      .catch(function(error){\n        console.error(`N칚o foi poss칤vel buscar a cidade a partir da lat/long. Erro ${error.message}`)\n      })\n    }\n  }, [])\n\n  async function obtemClima(cidade){\n    setObtendoClima(true)\n    const apiWeather = process.env.REACT_APP_APIKEY_WEATHER\n    let urlClima = `http://api.openweathermap.org/data/2.5/weather?q=${cidade}&lang=pt&units=metric&appid=${apiWeather}`\n    await fetch(urlClima)\n    .then(response => response.json())\n    .then(\n      data => {\n        switch(data.cod){\n          case '401':\n            setErro(\"A API key informada 칠 inv치lida\")\n            setClima(null)\n          break\n          \n          case '404':\n            setErro(\"A cidade inserida n칚o foi encontrada\")\n            setClima(null)\n            setCidade('')\n          break\n\n          case '429':\n            setErro(\"O uso gratuito da API foi excedido (60 chamadas por minuto)\")\n            setClima(null)\n          break\n\n          default:\n            setClima(data)\n        }     \n    })\n\n    .catch(function(error){\n      console.error(`Houve um erro ao consultar a API: ${error.message}`)\n    })\n    setObtendoClima(false)\n  }\n\n  return(\n    <> {/*React Fragment (todo o c칩digo precisa estar dentro de um elemento pai, independente da tag)*/}\n      <Navbar bg=\"secondary\">\n        \n        <Navbar.Brand href=\"#inicio\" className=\"text-white\">FateClima</Navbar.Brand>\n\n        <Nav className=\"mr-auto\">\n\n          <Nav.Link className=\"text-white\" href=\"#inicio\">In칤cio</Nav.Link>\n\n          <Nav.Link className=\"text-white\" href=\"contato\">Contato</Nav.Link>\n\n        </Nav>\n\n        <Form inline>\n\n          <FormControl \n          type=\"text\" \n          value={cidade}\n          placeholder=\"Informe a cidade...\" \n          onChange={e => setCidade(e.target.value)}\n          />\n\n          &nbsp;\n\n          <Button onClick={() => {obtemClima(cidade)}} disabled={cidade.length < 3}> {/*Chamamos a fun칞칚o desse jeito pois se houvesse somente a obtemClima(cidade), a fun칞칚o seria disparada quando a p치gina inicializasse por causa do parametro 'cidade' j치 estar setado com um valor*/} \n            {obtendoClima ? <Spinner size=\"sm\" animation=\"border\"/> : <FaCloudversify size=\"25\"/>} \n            &nbsp;Obter Clima\n          </Button>\n\n        </Form>\n\n      </Navbar>\n\n      <Jumbotron>\n        <FaCloudRain size=\"35\"/><h1>FateClima</h1>\n        <p>\n          Consulte o clima de qualquer cidade do mundo!<br></br>\n\n          <p className=\"text-italic\">App desenvolvido em ReactJS e integrado a API OpenWeatherMap.</p>\n\n        </p>\n      </Jumbotron>\n\n      {erroGeo &&\n        <div className=\"d-flex justify-content-center\">\n          <Alert variant=\"danger\" onClose={()=>setErroGeo(null)} dismissible>\n            <Alert.Heading>Ops! Ocorreu um erro ao obter sua localiza칞칚o.</Alert.Heading>\n            <p>{listaErrosGeo[erroGeo].texto}</p>\n          </Alert>\n        </div>\n      }\n\n      {erro &&\n        <div className=\"d-flex justify-content-center\">\n          <Toast onClose={() => setErro(null)} delay={4000} autohide>\n            <ToastHeader>\n              <strong className=\"mr-auto\">{erro}</strong>\n              <small className=\"mr-auto\">游뗷</small>\n            </ToastHeader>\n            <ToastBody className=\"text-danger\">Por favor, fa칞a uma nova busca.</ToastBody>\n          </Toast>\n        </div>\n      }\n\n      {obtendoClima &&\n      <Row className=\"justify-content-center\">\n        <Spinner animation=\"border\" variant=\"primary\"></Spinner>\n      </Row>\n      }\n\n      <Row className=\"justify-content-center\">\n        {clima &&\n        <Card bg=\"secondary\" className=\"text-center text-white\">\n          <Card.Header>\n            <h2>{clima.name}</h2>\n            <h3>{clima.main.temp}&#x2103;</h3>\n            <h5><FaArrowDown/>Min: {clima.main.temp_min}&#x2103; &nbsp;&nbsp;&nbsp; <FaArrowUp/>M치x: {clima.main.temp_max}&#x2103;</h5>\n          </Card.Header>\n          <Card.Body>\n            <Card.Img src={`http://openweathermap.org/img/wn/${clima.weather[0].icon}@2x.png`} title={clima.weather[0].description}/>\n            <Card.Title>{clima.weather[0].description}</Card.Title>\n          </Card.Body>\n          <Card.Footer>\n            Atualizado em: {new Date(clima.dt*1000).toLocaleString('pt-BR', {timezone: \"America/Sao_Paulo\"})}\n          </Card.Footer>\n        </Card>\n        }\n      </Row>\n    </>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}